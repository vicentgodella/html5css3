include mixins
include variables

!!! 5
//- Layout based on the index.html slideshow of reveal.js
html(lang='en')
  head
    meta(charset='utf-8')
    block title
    //- meta(name='apple-mobile-web-app-capable', content='yes')
    //- meta(name='apple-mobile-web-app-status-bar-style', content='black-translucent')
    link(rel='stylesheet', href='assets/css/style.css')
    // For syntax highlighting
    link(rel='stylesheet', href='assets/css/zenburn.css')
    script
      // If the query includes 'print-pdf' we'll use the PDF print sheet
      document.write( '<link rel="stylesheet" href="assets/css/print/' + ( window.location.search.match( /print-pdf/gi ) ? 'pdf' : 'paper' ) + '.css" type="text/css" media="print">' );

  body
    .reveal
      // Used to fade in a background when a specific slide state is reached
      .state-background
      // Any section element inside of this container is displayed as a slide
      .slides
        block slides

      // The navigational controls UI
      aside.controls
        a.left(href='#') ◄
        a.right(href='#') ►
        a.up(href='#') ▲
        a.down(href='#') ▼
      // Presentation progress bar
      .progress
        span
    script(src='assets/js/head.min.js')
    script(src='assets/js/reveal.custom.min.js')
    script(src='assets/js/html5shiv.js')

    script
      // Full list of configuration options available here:
      // https://github.com/hakimel/reveal.js#configuration
      Reveal.initialize({
      controls: true,
      progress: true,
      history: true,
      rollingLinks: false,
      transition: 'default',
      // Optional libraries used to extend on reveal.js
      dependencies: [
      { src: 'assets/js/highlight.js', async: true, callback: function() { window.hljs.initHighlightingOnLoad(); } },
      { src: 'assets/js/classList.js', condition: function() { return !document.body.classList; } },
      //{ src: 'assets/js/showdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
      //{ src: 'assets/js/data-markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
      { src: 'socket.io/socket.io.js', async: true, condition: function() { return window.location.host === 'localhost:1947'; } },
      { src: 'plugin/speakernotes/client.js', async: true, condition: function() { return window.location.host === 'localhost:1947'; } },
      ]
      });
    mixin analytics
